name: Build and Publish

on:
  push:
    branches:
      - master
    tags:
      - 'v*.*.*'
  pull_request:
    branches:
      - master
  release:
    types:
      - created

jobs:
  build-n-publish:
    name: Build and publish to PyPI and create binaries
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel twine pyinstaller

      - name: Extract version from Python script
        id: version
        run: echo "::set-output name=VERSION::$(python -c 'from version import __version__; print(__version__)')"

      - name: Build dist
        run: |
          python setup.py sdist bdist_wheel

      - name: Build binary with PyInstaller
        run: pyinstaller --onefile --paths ./echowarp/ --name EchoWarp-${{ matrix.os }} ./echowarp/main.py

      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ github.repository }}-${{ matrix.os }}
          path: dist/*

      - name: Publish to PyPI
        if: startsWith(github.ref, 'refs/tags/v')
        uses: pypa/gh-action-pypi-publish@v1.4.2
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          user: __token__
          repository_url: https://upload.pypi.org/legacy/

      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.VERSION }}
          release_name: Release ${{ steps.version.outputs.VERSION }}
          draft: false
          prerelease: false
