name: Build and Publish

on:
  push:
    branches:
      - master
  release:
    types:
      - created

jobs:
  get_version:
    name: Get version of package
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Extract version from Python script
        id: version
        run: |
          VERSION=$(python -c 'from version import __version__; print(__version__)')
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Set output
        id: set_output
        run: |
          echo "::set-output name=version::$VERSION"

      - name: Check if version exists on PyPI
        run: |
          RESPONSE=$(curl -s https://pypi.org/pypi/echowarp/json)
          EXISTS=$(echo $RESPONSE | jq --arg VERSION "$VERSION" '.releases | has($VERSION)')
          if [[ "$EXISTS" == "true" ]]; then
            echo "Version $VERSION already exists on PyPI, stopping job."
            exit 1
          fi

    outputs:
      version: ${{ steps.set_output.outputs.version }}

  build:
    needs: get_version
    name: Build and package
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install system dependencies on Ubuntu
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get install -y portaudio19-dev

      - name: Install system dependencies on macOS
        if: matrix.os == 'macos-latest'
        run: brew install portaudio

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel twine pyinstaller
          pip install -r requirements.txt

      - name: Build dist on Ubuntu
        if: matrix.os == 'ubuntu-latest'
        run: |
          python setup.py sdist bdist_wheel

      - name: Build binary with PyInstaller
        run: >
          pyinstaller 
          --noconfirm 
          --paths=./echowarp/ 
          --onefile 
          --name=EchoWarp-${{ needs.get_version.outputs.version }}-${{ matrix.os }}
          ./echowarp/main.py

      - name: Upload WHL for Ubuntu
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v2
        with:
          name: echowarp-${{ needs.get_version.outputs.version }}-py3-none-any.whl
          path: dist/echowarp-${{ needs.get_version.outputs.version }}-py3-none-any.whl

      - name: Upload Binaries for each OS
        uses: actions/upload-artifact@v2
        with:
          name: EchoWarp-${{ needs.get_version.outputs.version }}-${{ matrix.os }}
          path: dist/EchoWarp-${{ needs.get_version.outputs.version }}-${{ matrix.os }}${{ matrix.os == 'windows-latest' && '.exe' || '' }}

  release:
    needs: [ build, get_version ]
    name: Create Release and Publish to PyPI
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Download all artifacts
        uses: actions/download-artifact@v2
        with:
          path: dist

      - name: Create and Push Tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a ${{ needs.get_version.outputs.version }} -m "Release ${{ needs.get_version.outputs.version }}"
          git push origin ${{ needs.get_version.outputs.version }}

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.get_version.outputs.version }}
          name: Release ${{ needs.get_version.outputs.version }}
          files: dist/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-to-pypi:
    needs: [ release, get_version ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Download all artifacts
        uses: actions/download-artifact@v2
        with:
          path: dist

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Publish to PyPI
        run: |
          pip install twine
          twine upload dist/**/*.whl
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}